AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Spring Boot Application with PostgreSQL RDS on EC2

Parameters:
  VpcCIDR:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for the VPC
  KeyName:
    Description: Name of an existing EC2 keypair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 keypair.
  DBMasterUsername:
    Description: Master username for the RDS instance
    Type: String
  DBMasterUserPassword:
    Description: Master user password for the RDS instance
    Type: String
    NoEcho: true  # Hides the password during stack creation/update

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: 'eu-west-1a'

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'eu-west-1b'

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to RDS instance
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432  # PostgreSQL default port
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  MyEC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to RDS instance
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22  # SSH default port
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080  # SSH default port
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref MyRouteTable

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      PubliclyAccessible: true
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 13.9
      DBInstanceIdentifier: MyDBInstance
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref MySecurityGroup

  MyEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: 'arn:aws:s3:::bean-quiz-bucket/*'
              - Effect: Allow
                Action: 's3:*ListBucket'
                Resource: 'arn:aws:s3:::bean-quiz-bucket'
      
  MyEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref MyEC2InstanceRole


  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SecurityGroupIds:
        - !Ref MyEC2InstanceSecurityGroup
      ImageId: ami-0fc3317b37c1269d3
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir /myapp
          cd /myapp
          sudo dnf update
          sudo dnf install java-21-amazon-corretto
          sudo dnf install java-21-amazon-corretto-devel
          aws s3 cp s3://bean-quiz-bucket/demo-0.0.1-SNAPSHOT.jar .
          chmod -R 777 ./
          java -jar demo-0.0.1-SNAPSHOT.jar

Outputs:
  SpringBootEC2IP:
    Description: IP address of the Spring Boot EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
  RDSInstanceEndpoint:
    Description: Endpoint of the PostgreSQL RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address
